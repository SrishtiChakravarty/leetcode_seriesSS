You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.








YouInput: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807. are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.













#include <bits/stdc++.h> 
/****************************************************************

    Following is the class structure of the Node class:

        class Node
        {
        public:
            int data;
	        Node *next;
            Node(int data)
            {
                this->data = data;
                this->next = NULL;
            }
        };

*****************************************************************/

Node *addTwoNumbers(Node *head1, Node *head2)

{

   Node * dummy = new Node(1);

Node * temp = dummy;

 

int carry=0;

while(head1!=NULL || head2!=NULL || carry==1)

{

 int sum=0;

 if(head1!=NULL)

 {

  sum+=head1->data;

  head1=head1->next;

 }

 

 if(head2!=NULL)

 {

  sum+=head2->data;

  head2=head2->next;

 }

 

 sum +=carry;

 carry=sum/10;

 Node * sumation = new Node(sum%10);

 temp->next = sumation;

 temp=temp->next;

 

}

return dummy->next;

}

 
