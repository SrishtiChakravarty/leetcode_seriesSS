Copy List with Random Pointer
Medium


A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.

Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.

For example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.

Return the head of the copied linked list.

The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:

val: an integer representing Node.val
random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.
Your code will only be given the head of the original linked list.



Solution :

Referance:https://leetcode.com/problems/copy-list-with-random-pointer/ -question 
Answer Expl ref=Akash Manna
akash2099





EXPLANATION
The algorithm is divided into 3 steps (3 passes) :
Let us assume :
image

STEP 1: PASS 1 (Altering the link list)
Iterate the given link list and at each iteration create a copy (except random pointer) of each node and insert it just next to the node it's copied from as shown below.

If initially the link list is like : A->B->C->D
Then after this step the link list will be : A->A'->B->B'->C->C'->D->D'
where A',B',C',D' nodes are the copy of A,B,C,D nodes respectively except the random pointers.
Node* node=head;
while(node){
	Node* temp=node->next;
	node->next=new Node(node->val);
	node->next->next=temp;
	node=temp;
}
image

STEP 2: PASS 2 (Copying the random pointers)
Again iterate the link list and alternatively copy the old node's random pointer (if exists) to the new node's random pointer as shown below node->next->random=node->random->next.

node=head;
while(node){
	if(node->random)
		node->next->random=node->random->next;
	node=node->next->next; // go to next old node
}
image

STEP 3 : (PASS 3) (Restoring the old link list)

Create a dummy node (here ans) that will be used to copy the alternative new nodes from the link list using helper node along with restoring the old link list.
Finally, return ans->next as ans currenly points to a dummy node as shown below.
Node* ans=new Node(0); // first node is a dummy node
Node* helper=ans;

while(head){
	// Copy the alternate added nodes from the old linklist
	helper->next=head->next;
	helper=helper->next;

	// Restoring the old linklist, by removing the alternative newly added nodes
	head->next=head->next->next;
	head=head->next; // go to next alternate node   
}
return ans->next; // Since first node is a dummy node
image

COMPLETE CODE

class Solution {
public:
    Node* copyRandomList(Node* head) {
        
        // STEP 1: PASS 1
        // Creating a copy (except random pointer) of each old node and insert it next to the old node it's copied from.
        // That is, it will create new alternative nodes which are a copy (except random pointer) of its previous node.
        Node* node=head;
        while(node){
            Node* temp=node->next;
            node->next=new Node(node->val);
            node->next->next=temp;
            node=temp;
        }
        
        // STEP 2: PASS 2
        // Now copy the random pointer (if exists) of the old nodes to their copy new nodes.
        node=head;
        while(node){
            if(node->random)
                node->next->random=node->random->next;
            node=node->next->next; // go to next old node
        }
        
        //STEP 3: PASS 3
        // Copy the alternative nodes into "ans" link list using the "helper" pointer along with restoring the old link list.
        Node* ans=new Node(0); // first node is a dummy node
        Node* helper=ans;
    
        while(head){
            // Copy the alternate added nodes from the old linklist
            helper->next=head->next;
            helper=helper->next;
            
            // Restoring the old linklist, by removing the alternative newly added nodes
            head->next=head->next->next;
            head=head->next; // go to next alternate node   
        }
        return ans->next; // Since first node is a dummy node
    }
};
TIME COMPLEXITY
O(n+n+n)=O(n) [ Each step (pass) takes O(n) time }

SPACE COMPLEXITY
O(1)
