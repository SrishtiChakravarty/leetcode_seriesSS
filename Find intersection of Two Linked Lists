Problem Statement: Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.

Examples:

Example 1:
Input:
List 1 = [1,3,1,2,4], List 2 = [3,2,4]
Output:
2



#include <bits/stdc++.h> 
/****************************************************************
 
    Following is the class structure of the Node class:

        class Node
        {
        public:
	        int data;
	        Node *next;
	        Node(int data)
	        {
		        this->data = data;
		        this->next = NULL;
	        }
        };

*****************************************************************/

int findIntersection(Node *firstHead, Node *secondHead)
{
    if(firstHead==NULL || secondHead==NULL ) return -1;
    Node *a=firstHead;
    Node *b=secondHead;
    
    while(a!=b){
        a=a==NULL?firstHead:a=a->next;
        b=b==NULL?secondHead:b=b->next;
        
        
    }
    return a->data;
    
}---------------------------------------------------TO FIND THE DATA AT THAT NODE---------------------------


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode *a=headA;
        ListNode *b=headB;
        
        while(a!=b){
            a=a==NULL?headA:a=a->next;
            b=b==NULL?headB:b=b->next;
        }
        return a;
    }
};
