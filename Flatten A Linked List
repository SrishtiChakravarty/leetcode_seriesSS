Given a Linked List of size N, where every node represents a sub-linked-list and contains two pointers:
(i) a next pointer to the next node,
(ii) a bottom pointer to a linked list where this node is head.
Each of the sub-linked-list is in sorted order.
Flatten the Link List such that all the nodes appear in a single level while maintaining the sorted order. 
Note: The flattened list will be printed using the bottom pointer instead of next pointer. For more clearity have a look at the printList() function in the driver code.


Input:
5 -> 10 -> 19 -> 28
|          |                
7          22   
|          |                 
8          50 
|                           
30              
Output: 5->7->8->10->19->22->28->30->50
Explanation:
The resultant linked lists has every
node in a single level.






#refernce 
https://takeuforward.org/data-structure/flattening-a-linked-list/
https://practice.geeksforgeeks.org/problems/flattening-a-linked-list/1











#include <bits/stdc++.h> 
#include <bits/stdc++.h> 
/****************************************************************

    Following is the class structure of the Node class:

class Node {
public:
	int data;
	Node* next;
	Node* child;

	Node(int data) {
		this->data = data;
		this->next = NULL;
		this->child = NULL;
	}
};



*****************************************************************/
Node* mergetwolist(Node* a,Node* b){
    Node* temp=new Node(0);
    Node* res=temp;
    
    while(a!=NULL && b!=NULL){
        if(a->data < b->data){
            temp->child=a;
            temp=temp->child;
            a=a->child;
              
        }
        else{
            temp->child=b;
            temp=temp->child;
            b=b->child;
        }
    }
    
    if(a)temp->child=a;
    else temp->child=b;
    
    return res->child;
    
    
}





Node* flattenLinkedList(Node* head) 
{
   if(head==NULL || head->next==NULL)
       return head;
    
    
    head->next=flattenLinkedList(head->next);
    head=mergetwolist(head, head->next);
    
    return head;
}
